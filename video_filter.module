<?php
// $Id$

/**
 * @file
 * Video filter is a highly flexible and easy extendable filter module
 * to embed any type of video in your site using a simple tag
 */

module_load_include('inc', 'video_filter', 'video_filter.codecs');

/**
 * Implements hook_filter_info().
 */
function video_filter_filter_info() {
  $filters = array();
  $filters['video_filter'] = array(
    'title' => t('Video Filter'),
    'description' => t('Substitutes [video:URL] with embedded HTML.'),
    'process callback' => '_video_filter_process',
    'settings callback' => '_video_filter_settings',
    'default settings' => array(
      'video_filter_width' => '400',
      'video_filter_height' => '400',
      'video_filter_autoplay' => 1,
      'video_filter_related' => 1,
    ),
    'tips callback' => '_video_filter_tips',
  );
  return $filters;
}

function _video_filter_settings($form, &$form_state, $filter, $format, $defaults, $filters) {
  $settings['video_filter_width'] = array(
    '#type' => 'textfield',
    '#title' => t('Default width setting'),
    '#default_value' => isset($filter->settings['video_filter_width']) ? $filter->settings['video_filter_width'] : $defaults['video_filter_width'],
    '#maxlength' => 4,
  );
  $settings['video_filter_height'] = array(
    '#type' => 'textfield',
    '#title' => t('Default height setting'),
    '#default_value' => isset($filter->settings['video_filter_height']) ? $filter->settings['video_filter_height'] : $defaults['video_filter_height'],
    '#maxlength' => 4,
  );
  $settings['video_filter_autoplay'] = array(
    '#type' => 'radios',
    '#title' => t('Default autoplay setting'),
    '#description' => t('Not all video formats support this setting.'),
    '#default_value' => isset($filter->settings['video_filter_autoplay']) ? $filter->settings['video_filter_autoplay'] : $defaults['video_filter_autoplay'],
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
  );
  $settings['video_filter_related'] = array(
    '#type' => 'radios',
    '#title' => t('Related videos setting'),
    '#description' => t('Show "related videos"? Not all video formats support this setting.'),
    '#default_value' => isset($filter->settings['video_filter_related']) ? $filter->settings['video_filter_related'] : $defaults['video_filter_related'],
    '#options' => array(
      0 => t('No'),
      1 => t('Yes'),
    ),
  );

  return $settings;
}

function _video_filter_tips($filter, $format, $long = FALSE) {
  if ($long) {
    $codecs = module_invoke_all('codec_info');
    $supported = array();
    $instructions = array();
    foreach ($codecs AS $codec) {
      $supported[] = $codec['name'];
      $instructions[] = isset($codec['instructions']) ? '<li>' . $codec['name'] . ':<br/>' . $codec['instructions'] . '</li>' : '';
    }
    return t('
      <p><strong>Video Filter</strong></p>
      <p>You may insert videos from popular video sites by using a simple tag <code>[video:URL]</code>.</p>
      <p>Examples:</p>
      <ul>
        <li>Single video:<br /><code>[video:http://www.youtube.com/watch?v=uN1qUeId]</code></li>
        <li>Random video out of multiple:<br /><code>[video:http://www.youtube.com/watch?v=uN1qUeId1,http://www.youtube.com/watch?v=uN1qUeId2]</code></li>
        <li>Override default autoplay setting: <code>[video:http://www.youtube.com/watch?v=uN1qUeId autoplay:1]</code></li>
        <li>Override default width and height:<br /><code>[video:http://www.youtube.com/watch?v=uN1qUeId width:X height:Y]</code></li>
        <li>Override default aspect ratio:<br /><code>[video:http://www.youtube.com/watch?v=uN1qUeId ratio:4/3]</code></li>
        <li>Align the video:<br /><code>[video:http://www.youtube.com/watch?v=uN1qUeId align:right]</code></li>
      </ul>
      <p>Supported sites: @codecs.</p>
      <p>Special instructions:</p>
      <small>Some codecs need special input. You\'ll find those instructions here.</small>
      <ul>!instructions</ul>', array('@codecs' => implode(', ', $supported), '!instructions' => implode('', $instructions)));
  }
  else {
    return t('You may insert videos with [video:URL]');
  }
}

function _video_filter_process($text, $filter, $format, $langcode, $cache, $cache_id) {
  if (preg_match_all('/\[video(\:(.+))?( .+)?\]/isU', $text, $matches_code)) {
    foreach ($matches_code[0] as $ci => $code) {
      $video = array(
        'source' => $matches_code[2][$ci],
        'width' => $filter->settings['video_filter_width'],
        'height' => $filter->settings['video_filter_height'],
        'autoplay' => $filter->settings['video_filter_autoplay'],
        'related' => $filter->settings['video_filter_related'],
      );

      // Insert default values to this settings array so we don't get any "Undefined index" warnings from PHP.
      $video += array(
        'ratio' => 0,
        'control_bar_height' => 0,
        'align' => NULL,
      );

      // Pick random out of multiple sources separated by ','
      if (strstr($video['source'], ',')) {
        $sources          = explode(',', $video['source']);
        $random           = array_rand($sources, 1);
        $video['source']  = $sources[$random];
      }

      // Load all codecs
      $codecs = module_invoke_all('codec_info');

      // Find codec
      foreach ($codecs AS $codec_name => $codec) {
        if (!is_array($codec['regexp'])) {
          $codec['regexp'] = array($codec['regexp']);
        }

        // Try different regular expressions
        foreach ($codec['regexp'] as $delta => $regexp) {
          if (preg_match($regexp, $video['source'], $matches)) {
            $video['codec'] = $codec;
            $video['codec']['delta'] = $delta;
            $video['codec']['matches'] = $matches;
            $video['codec']['codec_name'] = $codec_name; // used in theme function
            $video['codec']['control_bar_height'] = 0; // default
            break 2;
          }
        }
      }

      // Codec found
      if (isset($video['codec'])) {
        // Override default attributes
        if ($matches_code[3][$ci] && preg_match_all('/\s+([a-zA-Z_]+)\:(\s+)?([0-9\/]+)/i', $matches_code[3][$ci], $matches_attributes)) {
          foreach ($matches_attributes[0] AS $ai => $attribute) {
            $video[$matches_attributes[1][$ai]] = $matches_attributes[3][$ai];
          }
        }

        // Use configured ratio if present, use that from the codec otherwise
        if (isset($video['ratio']) && preg_match('/(\d+)\/(\d+)/', $video['ratio'], $tratio) ) {
          //validate given ratio parameter
          $ratio = $tratio[1] / $tratio[2];
        }
        else {
          $ratio = $video['codec']['ratio'];
        }
        // Default value for control bar height
        $control_bar_height = 0;
        if (isset($video['control_bar_height'])) {
          // respect control_bar_height option if present
          $control_bar_height = $video['control_bar_height'];
        }
        elseif (isset($video['codec']['control_bar_height'])) {
          // respect setting provided by codec otherwise
          $control_bar_height = $video['codec']['control_bar_height'];
        }

        // Resize to fit within width and height repecting aspect ratio
        if ($ratio) {
          $scale_factor = min(array(($video['height']-$control_bar_height), $video['width']/($ratio)));
          $video['height'] = round($scale_factor + $control_bar_height);
          $video['width'] = round($scale_factor * $ratio);
        }

        $video['autoplay'] = (bool) $video['autoplay'];
        $video['align'] = isset($video['align']) && in_array($video['align'], array('left', 'right', 'center')) ? $video['align'] : NULL;

        $replacement = $video['codec']['callback']($video);
      // Invalid format
      }
      else {
        $replacement = '<!-- VIDEO FILTER - INVALID CODEC IN: ' . $code . ' -->';
      }

      $text = str_replace($code, $replacement, $text);
    }
  }

  return $text;
}

/**
 * Wrapper that calls the theme function.
 */
function video_filter_flash($video, $params = array()) {
  return theme('video_filter_flash', $video, $params);
}

/**
 * Function that outputs the <object> element.
 *
 * @ingroup themeable
 */
function theme_video_filter_flash($video, $params = array()) {
  drupal_add_css(drupal_get_path('module', 'video_filter') . '/video_filter.css');
  $output = '';

  // Create classes
  $classes = array('video-filter');

  // Adds alignment
  if (isset($video['align'])) {
    $classes[] = 'video-' . $video['align'];
  }

  // Adds codec name
  $classes[] = 'video-' . $video['codec']['codec_name'];

  // First match is the URL, we don't want that as a class.
  unset($video['codec']['matches'][0]);
  foreach ($video['codec']['matches'] AS $match) {
    $classes[] = 'vf-' . strtolower(preg_replace('/[^a-zA-Z0-9]/', '', $match));
  }

  $output .= '<object class="' . implode(' ', $classes) . '" type="application/x-shockwave-flash" ';

  $output .= 'width="' . $video['width'] . '" height="' . $video['height'] . '" data="' . $video['source'] . '">' . "\n";

  $defaults = array(
    'movie' => $video['source'],
    'wmode' => 'transparent',
    'allowFullScreen' => 'true',
  );

  $params = array_merge($defaults, (is_array($params) && count($params)) ? $params : array());

  foreach ($params as $name => $value) {
    $output .= '  <param name="' . $name . '" value="' . $value . '" />' . "\n";
  }

  $output .= '</object>' . "\n";

  return $output;
}

/**
 * Implements hook_theme().
 */
function video_filter_theme($existing, $type, $theme, $path) {
  return array(
    'video_filter_flash' => array(
      'arguments' => array('video' => NULL, 'params' => array()),
    ),
  );
}